# Generated by Django 5.2.5 on 2025-08-08 08:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('country_code', models.CharField(help_text='ISO 3166-1 alpha-2', max_length=2)),
                ('latitude', models.DecimalField(decimal_places=5, max_digits=8)),
                ('longitude', models.DecimalField(decimal_places=5, max_digits=8)),
                ('timezone_name', models.CharField(blank=True, max_length=64, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'indexes': [models.Index(fields=['name', 'country_code'], name='weather_app_name_9af065_idx'), models.Index(fields=['latitude', 'longitude'], name='weather_app_latitud_f1c73d_idx')],
                'unique_together': {('name', 'country_code', 'latitude', 'longitude')},
            },
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=120)),
                ('searched_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('matched_city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='search_matches', to='weather_app.city')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_histories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-searched_at'],
                'indexes': [models.Index(fields=['user', 'searched_at'], name='weather_app_user_id_71b92f_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserFavoriteLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='weather_app.city')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_locations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'city'], name='weather_app_user_id_b8fdce_idx')],
                'unique_together': {('user', 'city')},
            },
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('temperature_c', models.DecimalField(decimal_places=2, max_digits=5)),
                ('humidity_pct', models.PositiveSmallIntegerField()),
                ('pressure_hpa', models.PositiveIntegerField()),
                ('wind_speed_ms', models.DecimalField(decimal_places=2, max_digits=5)),
                ('description', models.CharField(blank=True, max_length=120, null=True)),
                ('icon_code', models.CharField(blank=True, max_length=10, null=True)),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_weathers', to='weather_app.city')),
            ],
            options={
                'indexes': [models.Index(fields=['city', 'observed_at'], name='weather_app_city_id_789e59_idx')],
                'unique_together': {('city', 'observed_at')},
            },
        ),
        migrations.CreateModel(
            name='WeatherForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_time', models.DateTimeField()),
                ('temp_min_c', models.DecimalField(decimal_places=2, max_digits=5)),
                ('temp_max_c', models.DecimalField(decimal_places=2, max_digits=5)),
                ('precipitation_probability_pct', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=120, null=True)),
                ('icon_code', models.CharField(blank=True, max_length=10, null=True)),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forecasts', to='weather_app.city')),
            ],
            options={
                'indexes': [models.Index(fields=['city', 'forecast_time'], name='weather_app_city_id_352448_idx')],
                'unique_together': {('city', 'forecast_time')},
            },
        ),
    ]
